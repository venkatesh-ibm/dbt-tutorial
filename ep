import boto3
from datetime import datetime, timedelta

REGION = "eu-west-1"
DAYS = 45

ec2 = boto3.client("ec2", region_name=REGION)
cw = boto3.client("cloudwatch", region_name=REGION)

def format_bytes(num_bytes):
    """Convert bytes to human-readable MB/GB."""
    if isinstance(num_bytes, str):
        return num_bytes  # for N/A text
    if num_bytes >= 1024**3:
        return f"{num_bytes / (1024**3):.2f} GB"
    elif num_bytes >= 1024**2:
        return f"{num_bytes / (1024**2):.2f} MB"
    elif num_bytes >= 1024:
        return f"{num_bytes / 1024:.2f} KB"
    else:
        return f"{num_bytes} B"

def get_vpc_names():
    """Return dict of VPC ID â†’ Name."""
    vpc_map = {}
    vpcs = ec2.describe_vpcs()["Vpcs"]
    for vpc in vpcs:
        vpc_id = vpc["VpcId"]
        name_tag = next((t["Value"] for t in vpc.get("Tags", []) if t["Key"] == "Name"), "")
        vpc_map[vpc_id] = name_tag
    return vpc_map

def get_cloudwatch_bytes(vpce_id):
    """Return total BytesProcessed metric for endpoint or None if no metric."""
    start = datetime.utcnow() - timedelta(days=DAYS)
    end = datetime.utcnow()

    resp = cw.get_metric_statistics(
        Namespace="AWS/PrivateLinkEndpoints",
        MetricName="BytesProcessed",
        Dimensions=[{"Name": "VpcEndpointId", "Value": vpce_id}],
        StartTime=start,
        EndTime=end,
        Period=86400,  # 1 day
        Statistics=["Sum"]
    )

    if not resp["Datapoints"]:
        return None
    return sum(dp["Sum"] for dp in resp["Datapoints"])

def get_flow_log_map():
    """Return dict of VPC IDs with flow logs enabled."""
    fl_map = {}
    for vpc in ec2.describe_vpcs()["Vpcs"]:
        fl_map[vpc["VpcId"]] = False
    for fl in ec2.describe_flow_logs()["FlowLogs"]:
        if fl.get("ResourceType") == "VPC":
            fl_map[fl.get("ResourceId")] = True
    return fl_map

def get_endpoint_attachments(vpce):
    """Return comma-separated list of attachment resources."""
    attachments = []
    for assoc in vpce.get("NetworkInterfaceIds", []):
        attachments.append(f"ENI:{assoc}")
    for rt in vpce.get("RouteTableIds", []):
        attachments.append(f"RTB:{rt}")
    return ", ".join(attachments) if attachments else "-"

def main():
    vpc_names = get_vpc_names()
    flow_logs = get_flow_log_map()

    results = []
    endpoints = ec2.describe_vpc_endpoints()["VpcEndpoints"]

    total_eps = len(endpoints)
    print(f"Found {total_eps} VPC endpoints in {REGION}. Checking usage for last {DAYS} days...\n")

    for idx, ep in enumerate(endpoints, start=1):
        vpc_id = ep["VpcId"]
        vpce_id = ep["VpcEndpointId"]
        service_name = ep["ServiceName"]
        vpc_name = vpc_names.get(vpc_id, "")
        attachments = get_endpoint_attachments(ep)

        print(f"[{idx}/{total_eps}] Checking endpoint {vpce_id} ({service_name}) in VPC {vpc_id}...")

        total_bytes = get_cloudwatch_bytes(vpce_id)

        if total_bytes is None:  # Only check flow logs if metric is missing
            if flow_logs.get(vpc_id):
                total_bytes = "0 Bytes (Flow logs enabled)"
            else:
                total_bytes = "N/A (Flow logs not enabled)"

        results.append({
            "VpcId": vpc_id,
            "VpcName": vpc_name,
            "EndpointId": vpce_id,
            "ServiceName": service_name,
            "BytesProcessed": total_bytes,
            "Attachments": attachments
        })

    # Sort: treat N/A as 0 bytes
    def sort_key(item):
        val = item["BytesProcessed"]
        if isinstance(val, str):
            if val.startswith("N/A"):
                return -1  # Appear first
            if val.startswith("0 Bytes"):
                return 0
            return -1
        return val

    results.sort(key=sort_key)

    print("\n--- VPC Endpoint Usage Report ---")
    print(f"{'VPC ID':<15} {'VPC Name':<20} {'Endpoint ID':<25} {'Service Name':<45} {'Bytes Processed':<30} {'Attachments'}")
    print("-" * 150)
    for r in results:
        print(f"{r['VpcId']:<15} {r['VpcName']:<20} {r['EndpointId']:<25} {r['ServiceName']:<45} {format_bytes(r['BytesProcessed']):<30} {r['Attachments']}")

if __name__ == "__main__":
    main()
