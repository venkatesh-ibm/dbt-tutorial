import boto3
from datetime import datetime, timedelta, timezone

REGION = "eu-west-1"
DAYS = 45

def get_vpc_name(ec2_client, vpc_id):
    vpcs = ec2_client.describe_vpcs(VpcIds=[vpc_id])["Vpcs"]
    if vpcs and "Tags" in vpcs[0]:
        for tag in vpcs[0]["Tags"]:
            if tag["Key"] == "Name":
                return tag["Value"]
    return ""

def get_bytes_processed(cw_client, vpce_id):
    end_time = datetime.now(timezone.utc)
    start_time = end_time - timedelta(days=DAYS)

    # Get full dimensions from list_metrics
    metrics = cw_client.list_metrics(
        Namespace="AWS/PrivateLinkEndpoints",
        MetricName="BytesProcessed",
        Dimensions=[{"Name": "VpcEndpointId", "Value": vpce_id}]
    ).get("Metrics", [])

    if not metrics:
        return None  # No metric at all

    # Use first metric's dimensions exactly
    metric_dims = metrics[0]["Dimensions"]

    stats = cw_client.get_metric_statistics(
        Namespace="AWS/PrivateLinkEndpoints",
        MetricName="BytesProcessed",
        Dimensions=metric_dims,
        StartTime=start_time,
        EndTime=end_time,
        Period=86400,
        Statistics=["Sum"]
    )

    datapoints = stats.get("Datapoints", [])
    if not datapoints:
        return 0  # Metric exists but zero usage

    total_bytes = sum(dp["Sum"] for dp in datapoints)
    return total_bytes

def flow_logs_enabled(ec2_client, vpc_id):
    logs = ec2_client.describe_flow_logs(
        Filters=[{"Name": "resource-id", "Values": [vpc_id]}]
    ).get("FlowLogs", [])
    return bool(logs)

def convert_bytes(size_bytes):
    if size_bytes is None:
        return "N/A"
    if size_bytes == 0:
        return "0 B"
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if size_bytes < 1024:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024

def main():
    ec2_client = boto3.client("ec2", region_name=REGION)
    cw_client = boto3.client("cloudwatch", region_name=REGION)

    endpoints = ec2_client.describe_vpc_endpoints()["VpcEndpoints"]
    report = []

    for ep in endpoints:
        print(f"Checking endpoint {ep['VpcEndpointId']}...")

        vpc_id = ep["VpcId"]
        vpc_name = get_vpc_name(ec2_client, vpc_id)
        service_name = ep["ServiceName"]

        bytes_processed = get_bytes_processed(cw_client, ep["VpcEndpointId"])

        if bytes_processed is None:
            # No metric at all â†’ check flow logs
            if flow_logs_enabled(ec2_client, vpc_id):
                usage_str = "N/A (Flow logs enabled, no metric)"
            else:
                usage_str = "N/A (Flow logs not enabled)"
            bytes_sort_val = 0
        else:
            usage_str = convert_bytes(bytes_processed)
            bytes_sort_val = bytes_processed

        report.append({
            "VpcName": vpc_name,
            "VpcId": vpc_id,
            "EndpointId": ep["VpcEndpointId"],
            "ServiceName": service_name,
            "Usage": usage_str,
            "BytesSortVal": bytes_sort_val
        })

    # Sort by usage ascending (treat N/A as 0)
    report.sort(key=lambda x: x["BytesSortVal"])

    # Print table
    print(f"\n{'VPC Name':<20} {'VPC ID':<15} {'Endpoint ID':<20} {'Service Name':<40} {'Usage':<25}")
    print("-" * 130)
    for r in report:
        print(f"{r['VpcName']:<20} {r['VpcId']:<15} {r['EndpointId']:<20} {r['ServiceName']:<40} {r['Usage']:<25}")

if __name__ == "__main__":
    main()
