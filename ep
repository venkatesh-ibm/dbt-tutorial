import boto3
from datetime import datetime, timedelta, timezone

# Config
REGION = "eu-west-1"
DAYS = 45
METRIC_NAME = "BytesProcessed"
NAMESPACE = "AWS/PrivateLinkEndpoints"

# Initialize boto3 clients
ec2 = boto3.client("ec2", region_name=REGION)
cw = boto3.client("cloudwatch", region_name=REGION)

# Time range
end_time = datetime.now(timezone.utc)
start_time = end_time - timedelta(days=DAYS)

def get_vpc_name(vpc_id):
    """Get VPC Name tag if available."""
    vpcs = ec2.describe_vpcs(VpcIds=[vpc_id]).get("Vpcs", [])
    if vpcs:
        tags = {t["Key"]: t["Value"] for t in vpcs[0].get("Tags", [])}
        return tags.get("Name", "")
    return ""

def get_endpoint_metrics(vpce_id):
    """Find all matching BytesProcessed metrics for a VPC endpoint."""
    metrics = cw.list_metrics(
        Namespace=NAMESPACE,
        MetricName=METRIC_NAME
    )["Metrics"]

    return [m for m in metrics if any(d["Value"] == vpce_id for d in m["Dimensions"])]

def get_sum_bytes_for_metric(metric):
    """Query CloudWatch for sum of BytesProcessed for given metric dimensions."""
    response = cw.get_metric_statistics(
        Namespace=metric["Namespace"],
        MetricName=metric["MetricName"],
        Dimensions=metric["Dimensions"],
        StartTime=start_time,
        EndTime=end_time,
        Period=86400,  # 1 day
        Statistics=["Sum"]
    )
    return sum(dp["Sum"] for dp in response.get("Datapoints", []))

def format_bytes(num_bytes):
    """Convert bytes into human-readable KB/MB/GB."""
    if num_bytes >= 1024**3:
        return f"{num_bytes / (1024**3):.2f} GB"
    elif num_bytes >= 1024**2:
        return f"{num_bytes / (1024**2):.2f} MB"
    elif num_bytes >= 1024:
        return f"{num_bytes / 1024:.2f} KB"
    else:
        return f"{num_bytes} B"

def get_attachment_info(endpoint):
    """Check where the VPC endpoint is attached."""
    attachment_list = []
    attached = False

    if endpoint["VpcEndpointType"].lower() == "gateway":
        # Gateway endpoints attach via Route Tables
        rtb_ids = endpoint.get("RouteTableIds", [])
        if rtb_ids:
            attached = True
            attachment_list = [f"RTB:{rtb}" for rtb in rtb_ids]

    elif endpoint["VpcEndpointType"].lower() == "interface":
        # Interface endpoints attach via Network Interfaces
        ni_ids = endpoint.get("NetworkInterfaceIds", [])
        if ni_ids:
            attached = True
            attachment_list = [f"ENI:{eni}" for eni in ni_ids]

    return attached, ", ".join(attachment_list) if attachment_list else "-"

def main():
    endpoints = ec2.describe_vpc_endpoints()["VpcEndpoints"]

    # Print header
    print(f"{'VPC ID':<15} {'VPC Name':<20} {'VPC Endpoint ID':<25} {'Service Name':<50} {'Bytes Processed':<15} {'Attached?':<10} {'Attachment Info'}")
    print("-" * 170)

    for idx, ep in enumerate(endpoints, start=1):
        vpc_id = ep["VpcId"]
        vpce_id = ep["VpcEndpointId"]
        service_name = ep["ServiceName"]
        vpc_name = get_vpc_name(vpc_id)

        print(f"[{idx}/{len(endpoints)}] Processing {vpce_id} ({service_name})...")

        metrics = get_endpoint_metrics(vpce_id)

        total_bytes = 0
        for metric in metrics:
            total_bytes += get_sum_bytes_for_metric(metric)

        attached, attach_info = get_attachment_info(ep)

        print(f"{vpc_id:<15} {vpc_name:<20} {vpce_id:<25} {service_name:<50} {format_bytes(total_bytes):<15} {('Yes' if attached else 'No'):<10} {attach_info}")

if __name__ == "__main__":
    main()
